import pytest
import pandas as pd
import numpy as np
from matrices.export_matrix import ExportMatrix

@pytest.fixture
def df_parameters():
    
  dados = {
    "Setor": [
        "AAProdução", 
        "ACVarejoRural", "AFIndustBenef", "AGIndustTransf", "AHAtacado", "AIVarejoUrbano",
        "BFIndustBenef", "BGIndustTransf", "BHAtacado", "BIVarejoUrbano", "CFIndustBenef", "CGIndustTransf",
        "CHAtacado", "CIVarejoUrbano", "Total"
    ],
    #"Produção": [0]*15,
    "ACVarejoRural":     [0.676723, 0.000376, 0.000000, 0.000000, 0.000257, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.677356],
    "AFIndustBenef":     [0.167359, 0.175900, 0.000000, 0.000000, 0.002498, 0.004868, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.350625],
    "AGIndustTransf":    [0.000055, 0.000028, 0.000105, 0.000000, 0.000000, 0.000006, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000195],
    "AHAtacado":         [0.050208, 0.009095, 0.000040, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.059342],
    "AIVarejoUrbano":    [0.007316, 0.000982, 0.000328, 0.000000, 0.000000, 0.000000, 0.000744, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.009371],
    "AJConFinLocal":     [0.011758, 0.008002, 0.310155, 0.000195, 0.000028, 0.000952, 0.000000, 0.000000, 0.000204, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.331293],
    "BFIndustBenef":     [0.005856, 0.401013, 0.000086, 0.000000, 0.052061, 0.003721, 0.000000, 0.000000, 0.133817, 0.000532, 0.000000, 0.000000, 0.000000, 0.000000, 0.597087],
    "BGIndustTransf":    [0.000001, 0.000000, 0.000321, 0.000000, 0.004008, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.004330],
    "BHAtacado":         [0.070439, 0.062742, 0.000539, 0.000000, 0.000301, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.134022],
    "BIVarejoUrbano":    [0.000045, 0.000000, 0.000001, 0.000000, 0.000199, 0.000000, 0.014704, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.014950],
    "BJConFinEstadual":  [0.000002, 0.000000, 0.000042, 0.000000, 0.000000, 0.000000, 0.131392, 0.000001, 0.000000, 0.014418, 0.000000, 0.000000, 0.000000, 0.000000, 0.145855],
    "CFIndustBenef":     [0.010167, 0.003251, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.007765, 0.000000, 0.021183],
    "CGIndustTransf":    [0.000000, 0.000000, 0.000412, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000412],
    "CHAtacado":         [0.000071, 0.014247, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.014318],
    "CIVarejoUrbano":    [0.000000, 0.001856, 0.038503, 0.000000, 0.000000, 0.000000, 0.431780, 0.004008, 0.000000, 0.000000, 0.000000, 0.000000, 0.006553, 0.000000, 0.482700],
    "CJConFinNacional":  [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.018213, 0.000321, 0.000000, 0.000000, 0.021183, 0.000412, 0.000000, 0.482700, 0.522829],
    "Total":            [1.000000, 0.677492, 0.350532, 0.000195, 0.059353, 0.009547, 0.596833, 0.004330, 0.134022, 0.014950, 0.021183, 0.000412, 0.014318, 0.482700, 3.365868]
}

  matriz_parametros = pd.DataFrame(dados).set_index("Setor")
  return matriz_parametros

@pytest.fixture
def df_prices():
    dados = {
    "Produção": [0] * 15,
    "ACVarejoRural":     [0.804960, 0.681041, 0.000000, 0.000000, 1.127111, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.805013],
    "AFIndustBenef":     [1.482340, 1.361630, 0.000000, 0.000000, 1.463850, 3.007692, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.442438],
    "AGIndustTransf":    [4.332123, 1.801789, 4.431797, 0.000000, 0.000000, 2.767888, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 3.971571],
    "AHAtacado":         [0.789047, 0.672730, 9.658322, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.777137],
    "AIVarejoUrbano":    [1.494891, 1.846849, 4.386225, 0.000000, 0.000000, 0.000000, 1.916523, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.661870],
    "AJConFinLocal":     [1.641122, 1.321818, 2.396948, 62.580836, 9.658322, 4.577482, 0.000000, 0.000000, 2.333343, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 2.386220],
    "BFIndustBenef":     [1.278902, 0.830587, 1.194809, 0.000000, 1.108492, 3.998095, 0.000000, 0.000000, 1.796997, 1.404919, 0.000000, 0.000000, 0.000000, 0.000000, 1.095686],
    "BGIndustTransf":    [9.474704, 0.000000, 1.194809, 0.000000, 0.764678, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.799345],
    "BHAtacado":         [1.246107, 1.331268, 2.098102, 0.000000, 1.126070, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.289135],
    "BIVarejoUrbano":    [1.135048, 0.000000, 3.174959, 0.000000, 1.127111, 0.000000, 2.568840, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 2.534339],
    "BJConFinEstadual":  [3.151147, 0.000000, 2.173061, 0.000000, 0.000000, 0.000000, 2.883265, 12.155531, 0.000000, 3.369429, 0.000000, 0.000000, 0.000000, 0.000000, 2.932007],
    "CFIndustBenef":     [1.446094, 1.342817, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.735158, 0.000000, 1.536206],
    "CGIndustTransf":    [0.000000, 0.000000, 3.146331, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 3.146331],
    "CHAtacado":         [0.599472, 1.960897, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.954146],
    "CIVarejoUrbano":    [0.000000, 1.383915, 2.836885, 0.000000, 0.000000, 0.000000, 2.650035, 0.955847, 0.000000, 0.000000, 0.000000, 0.000000, 3.201179, 0.000000, 2.654951],
    "CJConFinNacional":  [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 2.616632, 1.194809, 0.000000, 0.000000, 2.288072, 3.883130, 0.000000, 3.529151, 3.427303],
    "Total":             [1.000000, 1.093860, 2.447401, 62.580836, 1.102719, 3.483208, 2.697427, 0.977163, 1.798224, 3.322280, 2.288072, 3.883130, 2.406144, 3.529151, 1.872773]
}

    index = [
    "AAProdução", 
    "ACVarejoRural", "AFIndustBenef", "AGIndustTransf", "AHAtacado",
    "AIVarejoUrbano", "BFIndustBenef", "BGIndustTransf", "BHAtacado", "BIVarejoUrbano",
    "CFIndustBenef", "CGIndustTransf", "CHAtacado", "CIVarejoUrbano", "Total"
]

    matriz_formacao_preco = pd.DataFrame(dados, index=index)
    return matriz_formacao_preco

@pytest.fixture
def matriz_validacao():
    dados = {
    "ACVarejoRural":     [793852.01, 373.16, 0.00, 0.00, 421.77, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    "AFIndustBenef":     [361536.19, 349044.18, 0.00, 0.00, 5329.44, 21335.22, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    "AGIndustTransf":    [348.66, 73.21, 678.21, 0.00, 0.00, 25.95, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    "AHAtacado":         [57733.89, 8916.26, 557.23, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    "AIVarejoUrbano":    [15937.21, 2643.64, 2099.00, 0.00, 0.00, 0.00, 2079.04, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    "AJConFinLocal":     [28120.30, 15413.69, 1083406.27, 17743.25, 392.83, 6350.22, 0.00, 0.00, 695.24, 0.00, 0.00, 0.00, 0.00, 0.00],
    "BFIndustBenef":     [10914.71, 485397.17, 149.55, 0.00, 84101.43, 21682.97, 0.00, 0.00, 350439.74, 1088.85, 0.00, 0.00, 0.00, 0.00],
    "BGIndustTransf":    [19.33, 0.00, 558.34, 0.00, 4466.69, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    "BHAtacado":         [127914.76, 121725.41, 1649.46, 0.00, 493.92, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    "BIVarejoUrbano":    [73.65, 0.00, 5.15, 0.00, 327.63, 0.00, 55047.95, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    "BJConFinEstadual":  [7.47, 0.00, 134.41, 0.00, 0.00, 0.00, 552086.31, 24.80, 0.00, 70795.97, 0.00, 0.00, 0.00, 0.00],
    "CFIndustBenef":     [21426.96, 6361.24, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 19634.87, 0.00],
    "CGIndustTransf":    [0.00, 0.00, 1890.37, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    "CHAtacado":         [62.02, 40713.54, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
    "CIVarejoUrbano":    [0.00, 3743.12, 159179.55, 0.00, 0.00, 0.00, 1667508.67, 5583.36, 0.00, 0.00, 0.00, 0.00, 30572.14, 0.00],
    "CJConFinNacional":  [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 31449.82, 449.20, 0.00, 0.00, 62440.91, 2049.30, 0.00, 2482571.11],
    "ExportacaoRestoMundo": [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 97909.01, 615.78, 0.00, 0.00, 24138.57, 492.62, 0.00, 0.00],
    "Total":             [1417947.16, 1034404.62, 1250307.54, 17743.25, 95533.71, 49394.36, 2406080.80, 6673.14, 351134.98, 71884.82, 86579.48, 2541.92, 50207.01, 2482571.11]
} 

    index = [
    "AAProdução",
    "ACVarejoRural",
    "AFIndustBenef",
    "AGIndustTransf",
    "AHAtacado",
    "AIVarejoUrbano",
    "BFIndustBenef",
    "BGIndustTransf",
    "BHAtacado",
    "BIVarejoUrbano",
    "CFIndustBenef",
    "CGIndustTransf",
    "CHAtacado",
    "CIVarejoUrbano"
]

    matriz_validacao = pd.DataFrame(dados, index=index)    
    return matriz_validacao

@pytest.fixture
def export_matrix(df_parameters, df_prices): 
    return ExportMatrix(
        df_parameters=df_parameters,
        df_prices=df_prices,  
        total_quantity=697281.18,
        export_usd=23862.02,
        export_proportions={"BFIndustBenef": 0.795, "BGIndustTransf": 0.005, "CFIndustBenef": 0.196, "CGIndustTransf": 0.004},
        implicit_price=2.73,
        export_price=2.09,
        default_export_value=14.09,
    )

def test_final_export_matrix(export_matrix, matriz_validacao):
    flow = export_matrix.calculate_quantity_flow()
    exported_qty = export_matrix.calculate_exported_quantity()
    flow_adj = export_matrix.adjust_quantity_flow(flow, 
                                                  exported_qty, 
                                                  export_column_name='ExportacaoRestoMundo',
                                                  adjust_column='CJConFinNacional')
    price_adj = export_matrix.adjust_export_prices(list(exported_qty),
                                                   export_column_name='ExportacaoRestoMundo')
    matriz_final_exportacao = export_matrix.calculate_final_export_matrix(flow_adj, price_adj,
                                                                          final_row='CIVarejoUrbano',
                                                                          final_column='ExportacaoRestoMundo')

    #compara os dfs com tolerância significante para a diferença do excel com o python
    pd.testing.assert_frame_equal(matriz_final_exportacao, matriz_validacao, check_exact=False, rtol=3)
