import pytest
import pandas as pd
from pandas.testing import assert_frame_equal
from matries.income_matrices import IncomeMatrices

@pytest.fixture
def setup_income_data():
    
    matriz_leontief_data = {'AAProdução': [0.0, 0.0, 0.0, 0.0, 0.0, 164571.006569, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 164571.006569],
 'ACVarejoRural': [629529.831533,
                   295.914581,
                   0.0,
                   0.0,
                   334.466187,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   630160.2123],
 'AFIndustBenef': [286638.545892,
                   276734.449348,
                   0.0,
                   0.0,
                   4225.367326,
                   66861.231892,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   634459.594459],
 'AGIndustTransf': [276.432486,
                    58.042925,
                    537.942433,
                    0.0,
                    3956.711564,
                    21.224213,
                    0.0,
                    0.0,
                    664.53843,
                    0.0,
                    0.0,
                    775.294835,
                    0.0,
                    0.0,
                    6290.186886],
 'AHAtacado': [45731.29796,
               7062.610032,
               201.577356,
               0.0,
               0.0,
               0.0,
               0.0,
               276.891012,
               1414.78208,
               0.0,
               0.0,
               276.891012,
               2374.191589,
               0.0,
               57338.241042],
 'AIVarejoUrbano': [12874.678979,
                    2135.634532,
                    1696.377468,
                    8687.777103,
                    963.646327,
                    0.0,
                    1945.679681,
                    23173.669936,
                    148307.861631,
                    0.0,
                    0.0,
                    164.3967,
                    15647.915919,
                    0.0,
                    215597.638276],
 'BFIndustBenef': [8653.572,
                   384840.218827,
                   118.622773,
                   0.0,
                   66678.619678,
                   17402.471522,
                   54665.11875,
                   0.0,
                   313428.067834,
                   1206.469057,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   846993.160441],
 'BGIndustTransf': [15.323545,
                    0.0,
                    442.858352,
                    0.0,
                    3541.350113,
                    0.0,
                    757.150686,
                    39257.420565,
                    18170.594026,
                    4632.198246,
                    0.0,
                    121.0,
                    0.0,
                    0.0,
                    66937.895532],
 'BHAtacado': [101415.390156,
               96508.25801,
               1308.314287,
               0.0,
               391.595258,
               0.0,
               1011.870896,
               42365.378886,
               0.0,
               0.0,
               0.0,
               30778.662926,
               2724.822498,
               0.0,
               276504.292916],
 'BIVarejoUrbano': [39.248826,
                    0.0,
                    2.745849,
                    0.0,
                    174.605125,
                    0.0,
                    29925.154325,
                    21631.659555,
                    4250.723096,
                    0.0,
                    0.0,
                    1550.026024,
                    0.0,
                    0.0,
                    57574.162799],
 'CFIndustBenef': [16988.061139,
                   5043.422168,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   0.0,
                   116771.00363,
                   0.0,
                   15567.227749,
                   0.0,
                   154369.714686],
 'CGIndustTransf': [0.0,
                    0.0,
                    1499.39185,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    31165.622982,
                    14153.99417,
                    0.0,
                    0.0,
                    46819.009001],
 'CHAtacado': [49.173366, 32279.149324, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4691.09296, 0.0, 0.0, 37019.41565],
 'CIVarejoUrbano': [0.0,
                    2967.676393,
                    126257.283055,
                    0.0,
                    0.0,
                    0.0,
                    1332565.278187,
                    4426.687641,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    24238.686939,
                    0.0,
                    1490455.612215],
 'Total': [1102211.555881,
           807925.376139,
           132065.113422,
           8687.777103,
           80266.361578,
           248855.934197,
           1420870.252526,
           131131.707595,
           486236.567097,
           5838.667303,
           147936.626612,
           52511.358626,
           60552.844694,
           0.0,
           4685090.142773]}
    matriz_leontief = pd.DataFrame(matriz_leontief_data)
    matriz_leontief.columns = ['AAProdução', 'ACVarejoRural', 'AFIndustBenef', 'AGIndustTransf', 'AHAtacado', 'AIVarejoUrbano', 'BFIndustBenef', 'BGIndustTransf', 'BHAtacado', 'BIVarejoUrbano', 'CFIndustBenef', 'CGIndustTransf', 'CHAtacado', 'CIVarejoUrbano', 'Total']
    matriz_leontief.index = ['AAProdução', 'ACVarejoRural', 'AFIndustBenef', 'AGIndustTransf', 'AHAtacado', 'AIVarejoUrbano', 'BFIndustBenef', 'BGIndustTransf', 'BHAtacado', 'BIVarejoUrbano', 'CFIndustBenef', 'CGIndustTransf', 'CHAtacado', 'CIVarejoUrbano', 'Total']

    
    matriz_renda_teste_data = {'AAProdução': [937640.549311, 102153.970867, 830968.037825, 106672.511486],
 'ACVarejoRural': [177765.163839, 2430.709184, 64284.854206, 113480.309633],
 'AFIndustBenef': [502394.481036, 310.650339, 8840.21379, 493554.267246],
 'AGIndustTransf': [2397.590217, 20.435835, 581.545004, 1816.045212],
 'AHAtacado': [22928.120536, 241.487875, 6386.618745, 16541.501791],
 'AIVarejoUrbano': [33258.29592, 748.703312, 19800.922116, 13457.373805],
 'BFIndustBenef': [573877.092085, 3342.243944, 95110.635009, 478766.457076],
 'BGIndustTransf': [64193.812063, 308.454734, 8777.733193, 55416.07887],
 'BHAtacado': [209732.274181, 1462.882246, 38688.779618, 171043.494563],
 'BIVarejoUrbano': [51735.495496, 17.566105, 464.569981, 51270.925515],
 'CFIndustBenef': [6433.088074, 287.728173, 12102.22604, 5669.137966],
 'CGIndustTransf': [5692.349625, 102.131552, 4295.787638, 1396.561987],
 'CHAtacado': [23533.429044, 198.103657, 8253.378041, 15280.051003],
 'CIVarejoUrbano': [1490455.612215, 0.0, 0.0, 1490455.612215],
 #'Total': [nan, nan, nan, nan]
 }
    matriz_renda_teste = pd.DataFrame(matriz_renda_teste_data)
    matriz_renda_teste.columns = ['AAProdução', 'ACVarejoRural', 'AFIndustBenef', 'AGIndustTransf', 
                                 'AHAtacado', 'AIVarejoUrbano', 'BFIndustBenef', 'BGIndustTransf', 
                                 'BHAtacado', 'BIVarejoUrbano', 'CFIndustBenef', 'CGIndustTransf', 
                                 'CHAtacado', 'CIVarejoUrbano']
    
    matriz_renda_teste.index = ['Value Added', 'Employed Personnel', 'Final Salary', 'Gross Profit']

    produtividade_monetaria_trabalho_data = {0: [10.789708,
     332.382574,
     425.12464,
     425.12464,
     332.382574,
     332.382574,
     425.12464,
     425.12464,
     332.382574,
     332.382574,
     514.154124,
     514.154124,
     305.662427,
     305.662427]}
    produtividade_monetaria_trabalho = pd.DataFrame(produtividade_monetaria_trabalho_data)
    produtividade_monetaria_trabalho.columns = [0]
    produtividade_monetaria_trabalho.index = ['AAProdução', 'ACVarejoRural', 'AFIndustBenef', 'AGIndustTransf', 'AHAtacado', 'AIVarejoUrbano', 'BFIndustBenef', 'BGIndustTransf', 'BHAtacado', 'BIVarejoUrbano', 'CFIndustBenef', 'CGIndustTransf', 'CHAtacado', 'CIVarejoUrbano']
    
    salario_medio_data = {0: [8.134466,
     26.446954,
     28.457119,
     28.457119,
     26.446954,
     26.446954,
     28.457119,
     28.457119,
     26.446954,
     26.446954,
     42.061318,
     42.061318,
     41.661917,
     41.661917]}
    salario_medio = pd.DataFrame(salario_medio_data)
    salario_medio.columns = [0]
    salario_medio.index = ['AAProdução', 'ACVarejoRural', 'AFIndustBenef', 'AGIndustTransf', 'AHAtacado', 'AIVarejoUrbano', 'BFIndustBenef', 'BGIndustTransf', 'BHAtacado', 'BIVarejoUrbano', 'CFIndustBenef', 'CGIndustTransf', 'CHAtacado', 'CIVarejoUrbano']
    
    return matriz_leontief, matriz_renda_teste, produtividade_monetaria_trabalho, salario_medio


def test_value_added(setup_income_data):
    matriz_leontief, matriz_validacao, produtividade_monetaria_trabalho, salario_medio = setup_income_data

    income_matrices = IncomeMatrices(
        matriz_leontief,
        labor_monetary_productivity=produtividade_monetaria_trabalho.iloc[:,0],
        average_salary=salario_medio.iloc[:,0],
        n=14
    )
    io_matrix_updated = income_matrices.value_added()
    io_matrix_updated = income_matrices.calculate_average_salary()
    io_matrix_updated = income_matrices.gross_profit()

    df_actual = io_matrix_updated.loc['Value Added':, :"CIVarejoUrbano"]
    df_actual.drop(columns='Total', inplace=True, errors='ignore')  # Adicionei errors='ignore' caso 'Total' não exista
    df_expected = matriz_validacao.loc['Value Added':, :"CIVarejoUrbano"]
    
    assert_frame_equal(df_actual, df_expected, 
                      check_names=False,
                      check_index_type=False,
                      atol=5)

